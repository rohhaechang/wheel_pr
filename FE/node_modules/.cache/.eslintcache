[{"/Users/rohhaechang/wheel_pr/FE/src/index.tsx":"1","/Users/rohhaechang/wheel_pr/FE/src/reportWebVitals.ts":"2","/Users/rohhaechang/wheel_pr/FE/src/App.tsx":"3","/Users/rohhaechang/wheel_pr/FE/src/Contexts/Side/index.tsx":"4","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/index.tsx":"5","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Button/index.tsx":"6","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/index.tsx":"7","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Input/index.tsx":"8","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/IconButton/index.tsx":"9","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/DataList/index.tsx":"10"},{"size":554,"mtime":1668318207836,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1668318207836,"results":"13","hashOfConfig":"12"},{"size":400,"mtime":1668318207835,"results":"14","hashOfConfig":"12"},{"size":682,"mtime":1668318207836,"results":"15","hashOfConfig":"12"},{"size":9135,"mtime":1668352716076,"results":"16","hashOfConfig":"12"},{"size":1065,"mtime":1668318207835,"results":"17","hashOfConfig":"12"},{"size":1380,"mtime":1668318207835,"results":"18","hashOfConfig":"12"},{"size":655,"mtime":1668318207835,"results":"19","hashOfConfig":"12"},{"size":807,"mtime":1668318207835,"results":"20","hashOfConfig":"12"},{"size":495,"mtime":1668318207835,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9j5zha",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rohhaechang/wheel_pr/FE/src/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/reportWebVitals.ts",[],[],"/Users/rohhaechang/wheel_pr/FE/src/App.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Contexts/Side/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Components/Map/index.tsx",["53","54","55","56","57","58"],[],"import React, {useEffect, useReducer, useRef, useState, useContext, useCallback} from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport { Button } from './Button';\nimport { Input } from './Input';\nimport Side from './Side';\nimport { SideContext } from '../../Contexts/Side';\n\n/** 공공데이터 reducer 타입 */\ntype Action = \n  | { type: 'LOADING';}\n  | { type: 'SUCCESS'; data: JSON;}\n  | { type: 'ERROR' ; error: string | unknown}\n\n/** 공공데이터 state 타입 */\ntype State = \n  {loading: any; data: any; error: any}\n; \n\n/** 공공데이터를 가져올 때 사용할 reducer */\nconst reducer = (state: any, action: Action) => {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null,\n      };\n    case 'SUCCESS':\n      return {\n        loading: false,\n        data: action.data,\n        error: null,\n      }\n    case 'ERROR':\n      return {\n        loading: false,\n        data: null,\n        error: action.error,\n      }\n    default: \n      throw new Error(`unhandled error`);\n  }\n}\n\n  let array12: any = [];\n  let array23: any = [];\n\nconst Map = () => {\n\n  /** 내가 있는 현재 위치 */\n  const [myLocation, setMyLocation] = useState<{latitude: number; longitude: number} | string>(``);\n  /** 검색 주소 */\n  const [search, setSearch] = useState(``);\n  /** 검색 좌표 */\n  const [searchCoord, setSearchCoord] = useState<{x: number; y: number} | string>(``);\n\n  /* 공공데이터 상태 */\n  const [state1, dispatch1] = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null,\n  })\n\n  const [state2, dispatch2] = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null,\n  })\n\n  const [state3, dispatch3] = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null,\n  })\n\n  const {select} = useContext(SideContext);\n\n  let dataArray1: any = [];\n  let dataArray2: any = [];\n  let dataArray3: any = [];\n\n  /** 지도를 담은 ref 객체 */\n  const mapElement = useRef<HTMLElement | null | any>(null);\n\n  /** 지도의 마커를 담은 ref 객체 */\n  const markerRef = useRef<any | null>(null);\n\n  /** 주소 검색 */\n  const searchAddress = async () => {\n    naver.maps.Service.geocode({\n      query: search\n    }, async function(status, response) {\n      if(status === naver.maps.Service.Status.ERROR) {\n        console.log('오류');\n      }\n      // 지도 위치 검색 좌표로 이동\n      mapElement.current.panTo(new naver.maps.LatLng(Number(response.v2.addresses[0].y), Number(response.v2.addresses[0].x)));\n      setSearchCoord({x: Number(response.v2.addresses[0].y), y: Number(response.v2.addresses[0].x)});\n    })\n  }\n\n  /** 현재 위치추적에 성공했을 때 위치값을 넣는다 */\n  const success = (position: any) => {\n    setMyLocation({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n    })\n  }\n\n  /** 현재 위치추적에 실패했을 때 초기값을 넣는다 */\n  const fail = () => {\n    setMyLocation({\n      latitude: 37.4979517,\n      longitude: 127.0276188,\n    })\n  }\n\n  /** 선택한 공공데이터에 따른 데이터 배열 생성 */\n  const createArray = useCallback((state: State, a: number) => {\n    if(a === 1) {\n      for(let i=0; i<10; i++) {\n        naver.maps.Service.geocode({\n          query: state.data.viewAmenitiesInfo.row[i].ADDR\n        }, function (status, response) {\n          if(status === naver.maps.Service.Status.ERROR) {\n            console.log('오류');\n          }\n          dataArray1[i] = response.v2.addresses[0];\n        })\n      }\n      console.log(dataArray1);\n    }\n    if(a === 2) {\n      for(let i=0; i<10; i++) {\n        naver.maps.Service.geocode({\n          query: state.data.stayLodgeInfo.row[i].ADDR\n        }, function (status, response) {\n          if(status === naver.maps.Service.Status.ERROR) {\n            console.log('오류');\n          }\n          dataArray2[i] = response.v2.addresses[0];\n        })\n      }\n    }\n    if(a === 3) {\n      for(let i=0; i<10; i++) {\n        naver.maps.Service.geocode({\n          query: state.data.touristFoodInfo.row[i].ADDR\n        }, function (status, response) {\n          if(status === naver.maps.Service.Status.ERROR) {\n            console.log('오류');\n          }\n          dataArray3[i] = response.v2.addresses[0];\n        })\n      }\n    }\n  }, []);\n\n  /** 현재 위치를 추적 */\n  useEffect(() => {\n    if(navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, fail);\n    }\n  }, []);\n  \n  /* 지도 생성 */\n  useEffect(() => {\n    const {naver} = window;\n    if(typeof myLocation !== 'string') \n      mapElement.current = new naver.maps.Map('map', {\n        center: new naver.maps.LatLng(myLocation.latitude, myLocation.longitude),\n        zoomControl: true,\n        zoom: 14,\n        zoomControlOptions: {\n          position: naver.maps.Position.TOP_RIGHT,\n        }\n      });\n      console.log('지도 호출');\n  }, [mapElement, myLocation]);\n\n  /* 마커 생성 */\n  useEffect(() => {\n    if(typeof myLocation !== 'string'){\n      markerRef.current = new naver.maps.Marker({\n        position: new naver.maps.LatLng(myLocation.latitude, myLocation.longitude),\n        map: mapElement.current,\n      })\n      /* 마커 클릭 시 지도 이동 */\n      naver.maps.Event.addListener(markerRef.current, 'click', () => {\n        const mapLatLng = new naver.maps.LatLng(myLocation.latitude, myLocation.longitude);\n        mapElement.current.panTo(mapLatLng, {duration: 400});\n      })\n    }\n  }, [myLocation]);\n\n  /* 공공데이터 가져오기 */\n  useEffect(() => {\n    const fetchUsers1 = async () => {\n      dispatch1({ type: 'LOADING' });\n      try {\n        const response = await axios.get(\n          `http://openapi.seoul.go.kr:8088/486857594b726863383574794f4669/json/viewAmenitiesInfo/1/900/`\n        );\n        dispatch1({ type: 'SUCCESS', data: response.data });\n      } catch (e) {\n        dispatch1({ type: 'ERROR', error: e});\n      }\n    }\n    const fetchUsers2 = async () => {\n      dispatch2({ type: 'LOADING' });\n      try {\n        const response = await axios.get(\n          `http://openapi.seoul.go.kr:8088/486857594b726863383574794f4669/json/stayLodgeInfo/1/280/`\n        );\n        dispatch2({ type: 'SUCCESS', data: response.data });\n      } catch (e) {\n        dispatch2({ type: 'ERROR', error: e});\n      }\n    }\n    const fetchUsers3 = async () => {\n      dispatch3({ type: 'LOADING' });\n      try {\n        const response = await axios.get(\n          `http://openapi.seoul.go.kr:8088/486857594b726863383574794f4669/json/touristFoodInfo/1/150/`\n        );\n        dispatch3({ type: 'SUCCESS', data: response.data });\n      } catch (e) {\n        dispatch3({ type: 'ERROR', error: e});\n      }\n    }\n    fetchUsers1();\n    fetchUsers2();\n    fetchUsers3();\n  }, []);\n\n  /** select에 따른 데이터 배열 생성 */\n  useEffect(() => {\n    if(select === 1) {\n      createArray(state1, 1);\n    }\n    if(select === 2) {\n      createArray(state2, 2);\n    }\n    if(select === 3) {\n      createArray(state3, 3);\n    }\n  }, [select, state1, state2, state3, createArray])\n\n  const fetchData = async () => {\n    try {\n      const res = await axios.get('/api');\n      array12 = res.data;\n      console.log(array12);\n    } catch (e) {\n      console.log(e);\n    }\n    finally {console.log('실행')}\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const sdf = () => {\n    for(let i=0; i<array12.length; i++) {\n      naver.maps.Service.geocode({\n        query: array12[i].addr\n      }, function(status, response) {\n        if(status === naver.maps.Service.Status.ERROR) {\n          console.log('오류');\n        }\n        array23[i] = response.v2.addresses[0];\n      })\n    }\n  }\n\n  const dfg = () => {\n    console.log(array23);\n  }\n\n  /** 지도 로딩 시(현재 위치 찾는 중)에 화면 렌더링 */\n  if(typeof myLocation === 'string') \n  return (\n    <MapContents>\n      <MapContainer>\n        <div style={{textAlign: 'center', fontSize: '30px', lineHeight: '600px'}}>Loading...</div>\n      </MapContainer>\n    </MapContents>\n  )\n\n  return (\n    <>\n    <MapContents>\n      <SearchContainer>\n        <Input placeholder='검색' onChange={(text) => setSearch(text)}/>\n        <Button backgroundColor='beige' onClick={() => {\n          searchAddress()\n          }} />\n          <Button backgroundColor='beige' onClick={() => sdf()} />\n          <Button backgroundColor='beige' onClick={() => dfg()} />\n      </SearchContainer>\n      <MapContainer>\n        <div id=\"map\" style={{minHeight: '600px',}}></div>\n      </MapContainer>\n    </MapContents>\n    <SideContents>\n      <Side />\n    </SideContents>\n    </>\n  )\n};\n\nconst MapContents = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  flex: 2;\n  height: 600px;\n`;\n\nconst SearchContainer = styled.div`\n  position: relative;\n  top: 1rem;\n  width: 305px;\n  height: 40px;\n  z-index: 2;\n  margin: 0 auto;\n`;\n\nconst MapContainer = styled.div`\n  position: relative;\n  z-index: 1;\n  top: -40px;\n`;\n\nconst SideContents = styled.div`\n  flex: 1;\n`;\n\nexport default Map;","/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Button/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Input/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/IconButton/index.tsx",[],[],"/Users/rohhaechang/wheel_pr/FE/src/Components/Map/Side/DataList/index.tsx",[],[],{"ruleId":"59","severity":1,"message":"60","line":57,"column":10,"nodeType":"61","messageId":"62","endLine":57,"endColumn":21},{"ruleId":"63","severity":1,"message":"64","line":126,"column":12,"nodeType":"65","messageId":"66","endLine":131,"endColumn":10},{"ruleId":"63","severity":1,"message":"64","line":139,"column":12,"nodeType":"65","messageId":"66","endLine":144,"endColumn":10},{"ruleId":"63","severity":1,"message":"64","line":151,"column":12,"nodeType":"65","messageId":"66","endLine":156,"endColumn":10},{"ruleId":"67","severity":1,"message":"68","line":159,"column":6,"nodeType":"69","endLine":159,"endColumn":8,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"64","line":270,"column":10,"nodeType":"65","messageId":"66","endLine":275,"endColumn":8},"@typescript-eslint/no-unused-vars","'searchCoord' is assigned a value but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'naver'.","FunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'dataArray1', 'dataArray2', and 'dataArray3'. Either include them or remove the dependency array.","ArrayExpression",["71"],{"desc":"72","fix":"73"},"Update the dependencies array to be: [dataArray1, dataArray2, dataArray3]",{"range":"74","text":"75"},[4103,4105],"[dataArray1, dataArray2, dataArray3]"]